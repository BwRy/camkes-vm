/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

#include <autoconf.h>

#include <configurations/vm.h>
#include <boost/preprocessor/repeat.hpp>

import <std_connector.camkes>;

import "interfaces/VirtIOPort.idl4";
import "interfaces/InterruptGenerator.idl4";
import "interfaces/PCIConfig.idl4";
import "interfaces/Timer.idl4";
import "interfaces/RTC.idl4";
import "interfaces/Ethdriver.idl4";

import "PIC.camkes";
import "HPET.camkes";
import "CMOS.camkes";
import "Serial.camkes";

import "components/Init/Init.camkes";
import "components/PCIConfigIO/PCIConfigIO.camkes";
import "components/TimeServer/TimeServer.camkes";
import "components/RTC/RTC.camkes";
import "components/RTCEmulator/RTCEmulator.camkes";
import "components/SerialEmulator/SerialEmulator.camkes";
import "components/SerialServer/SerialServer.camkes";
import "components/Ethdriver/Ethdriver.camkes";
import "components/Echo/Echo.camkes";

component PieceOfHardware {
    hardware;
    provides IOPort pci_config_address;
    provides IOPort pci_config_data;
};

component HWEthDriver {
    hardware;
    emits IRQ irq;
    dataport EthDriverMMIO mmio;
};

#define REPEAT_WRAPPER(num, iteration, data) data(iteration)

assembly {
    composition {

        /* Perform the VM component definitions */
        BOOST_PP_REPEAT(VM_NUM_GUESTS, REPEAT_WRAPPER, VM_COMP_DEF)

        /* Hardware multiplexing components */
        component SerialServer serial;
        component PCIConfigIO pci_config;
        component TimeServer time_server;
        component RTC rtc;

        /* Hardware components that are not actuall instantiated */
        component HPET hpet;
        component CMOS cmos;
        component Serial hw_serial;
        /* Hack to get hardware definitions sensibly in camkes for the cmoment */
        component PieceOfHardware poh;

        /* Components defined by the platform specification */
        PLAT_COMPONENT_DEF()

        /* These components don't do much output, but just in case they can pretend to
         * be vm0 */
        connection seL4RPCCall serial_pci_config(from pci_config.putchar, to serial.vm0);
        connection seL4RPCCall serial_time_server(from time_server.putchar, to serial.vm0);
        connection seL4RPCCall serial_rtc(from rtc.putchar, to serial.vm0);

        /* Perform the per VM connections */
        BOOST_PP_REPEAT(VM_NUM_GUESTS, REPEAT_WRAPPER, VM_CONNECT_DEF)

        /* Connect the hardware RTC to the RTC component */
        connection seL4HardwareIOPort rtc_cmos_address(from rtc.cmos_address, to cmos.cmos_address);
        connection seL4HardwareIOPort rtc_cmos_data(from rtc.cmos_data, to cmos.cmos_data);

        /* COnnect the serial server to the timer server */
        connection seL4RPCCall serialserver_timer(from serial.timeout, to time_server.the_timer);
        connection seL4Asynch serialserver_timeout(from time_server.timer1_complete, to serial.timeout_complete);

        /* Connect io ports to pci config space */
        connection seL4HardwareIOPort config_address_ports(from pci_config.config_address, to poh.pci_config_address);
        connection seL4HardwareIOPort config_data_ports(from pci_config.config_data, to poh.pci_config_data);

        /* Connections defined by the platform specification */
        PLAT_CONNECT_DEF()

        /* Connect the hardware hpet to the timer driver */
        connection seL4HardwareMMIO hpet_base(from time_server.hpet, to hpet.hpet);
        connection seL4IOAPICHardwareInterrupt hpet_irq(from hpet.irq, to time_server.irq);

        /* Connect the hardware serial to the serial server */
        connection seL4HardwareIOPort serial_ioport(from serial.serial_port, to hw_serial.serial);
        connection seL4IOAPICHardwareInterrupt serial_irq(from hw_serial.serial_irq, to serial.serial_irq);
    }
    configuration {
        serial.timeout_attributes = "1";

        hpet.hpet_attributes = "0xFED00000:0x1000";
#ifdef CONFIG_APP_CAMKES_VM_HPET_MSI
        hpet.irq_attributes = "24,0,0";
#else
#define QUOTE "
#define _MAKE_IRQ_ATTRIB(x) QUOTE x,0,0 QUOTE ;
#define MAKE_IRQ_ATTRIB(x) _MAKE_IRQ_ATTRIB(x)
        hpet.irq_attributes = MAKE_IRQ_ATTRIB(HPET_IRQ())
#endif

        /* Serial port definitions */
        hw_serial.serial_attributes="0x3f8:3ff";
        hw_serial.serial_irq_attributes = "4,0,0";

        /* PCI config space definitions */
        poh.pci_config_address_attributes = "0xcf8:cfb";
        poh.pci_config_data_attributes = "0xcfc:cff";

        PLAT_CONFIG_DEF()

        BOOST_PP_REPEAT(VM_NUM_GUESTS, REPEAT_WRAPPER, VM_CONFIG_DEF)

        cmos.cmos_address_attributes = "0x70:70";
        cmos.cmos_data_attributes = "0x71:71";
    }
}
