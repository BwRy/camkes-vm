/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

#include <autoconf.h>

#include <configurations/vm.h>
#include <boost/preprocessor/repeat.hpp>

import <std_connector.camkes>;

import <VirtIOPort.idl4>;
import <InterruptGenerator.idl4>;
import <PCIConfig.idl4>;
import <Timer.idl4>;
import <RTC.idl4>;
import <Ethdriver.idl4>;
import <VchanInterface.idl4>;

import "PIC.camkes";
import "PIT.camkes";
import "CMOS.camkes";
import "Serial.camkes";

import "components/Init/Init.camkes";
import "components/PCIConfigIO/PCIConfigIO.camkes";
import <TimeServer/TimeServer.camkes>;
import "components/RTC/RTC.camkes";
import "components/SerialServer/SerialServer.camkes";
import "components/Ethdriver/Ethdriver.camkes";
import "components/UDPServer/UDPServer.camkes";
import "components/Echo/Echo.camkes";
import "components/Vchan/Vchan.camkes";
import "components/HelloWorld/HelloWorld.camkes";


connector seL4GlobalAsynch {
    from Event notifier template "seL4GlobalAsynch-from.template.c";
    to Event server template "seL4GlobalAsynch-to.template.c";
}

connector seL4UDPSend {
    from Dataport client template "seL4UDPSend-from.template.c";
    to Dataport server template "seL4UDPSend-to.template.c";
}

connector seL4UDPRecv {
    from Dataport client template "seL4UDPRecv-from.template.c";
    to Dataport server template "seL4UDPRecv-to.template.c";
}

connector seL4VMNet {
    from Dataport client1 template "seL4VMNet-from.template.c";
    to Dataport client2 template "seL4VMNet-to.template.c";
}

connector seL4ProdCon {
    from Dataport server template "seL4ProdCon-from.template.c";
    to Dataport client template "seL4ProdCon-to.template.c";
}

connector seL4TimeServer {
    from Procedure client template "seL4TimeServer-from.template.c";
    to Procedure server template "seL4TimeServer-to.template.c";
}

component PieceOfHardware {
    hardware;
    provides IOPort pci_config_address;
    provides IOPort pci_config_data;
};

component HWEthDriver {
    hardware;
    emits IRQ irq;
    dataport EthDriverMMIO mmio;
};

#define REPEAT_WRAPPER(num, iteration, data) data(iteration)

assembly {
    composition {

        /* Perform the VM component definitions */
        BOOST_PP_REPEAT(VM_NUM_GUESTS, REPEAT_WRAPPER, VM_COMP_DEF)

        /* Hardware multiplexing components */
        component SerialServer serial;
        component PCIConfigIO pci_config;
        component TimeServer time_server;
        component RTC rtc;

        /* Hardware components that are not actuall instantiated */
        component PIT pit;
        component CMOS cmos;
        component Serial hw_serial;
        /* Hack to get hardware definitions sensibly in camkes for the cmoment */
        component PieceOfHardware poh;

        /* Components defined by the platform specification */
        PLAT_COMPONENT_DEF()

        /* These components don't do much output, but just in case they can pretend to
         * be vm0 */
        connection seL4RPCCall serial_pci_config(from pci_config.putchar, to serial.vm0);
        connection seL4RPCCall serial_time_server(from time_server.putchar, to serial.vm0);
        connection seL4RPCCall serial_rtc(from rtc.putchar, to serial.vm0);

        /* Perform the per VM connections */
        BOOST_PP_REPEAT(VM_NUM_GUESTS, REPEAT_WRAPPER, VM_CONNECT_DEF)

        /* Connect the hardware RTC to the RTC component */
        connection seL4HardwareIOPort rtc_cmos_address(from rtc.cmos_address, to cmos.cmos_address);
        connection seL4HardwareIOPort rtc_cmos_data(from rtc.cmos_data, to cmos.cmos_data);

        /* COnnect the serial server to the timer server */
        connection seL4TimeServer serialserver_timer(from serial.timeout, to time_server.the_timer);

        /* Connect io ports to pci config space */
        connection seL4HardwareIOPort config_address_ports(from pci_config.config_address, to poh.pci_config_address);
        connection seL4HardwareIOPort config_data_ports(from pci_config.config_data, to poh.pci_config_data);

        /* Connections defined by the platform specification */
        PLAT_CONNECT_DEF()

        /* Connect the hardware pit to the timer driver */
        connection seL4HardwareIOPort pit_command(from time_server.pit_command, to pit.command);
        connection seL4HardwareIOPort pit_channel0(from time_server.pit_channel0, to pit.channel0);
        connection seL4IOAPICHardwareInterrupt pit_irq(from pit.irq, to time_server.irq);

        /* Connect the hardware serial to the serial server */
        connection seL4HardwareIOPort serial_ioport(from serial.serial_port, to hw_serial.serial);
        connection seL4IOAPICHardwareInterrupt serial_irq(from hw_serial.serial_irq, to serial.serial_irq);
    }
    configuration {
        serial.timeout_attributes = "1";
        serial.timeout_global_endpoint = "serial_server";
        serial.timeout_badge = "1";

        time_server.timers_per_client = 9;

        pit.command_attributes = "0x43:0x43";
        pit.channel0_attributes = "0x40:0x40";
        pit.irq_attributes = "2,0,0";

        /* Serial port definitions */
        hw_serial.serial_attributes="0x3f8:3ff";
        hw_serial.serial_irq_attributes = "4,0,0";

        /* PCI config space definitions */
        poh.pci_config_address_attributes = "0xcf8:cfb";
        poh.pci_config_data_attributes = "0xcfc:cff";

        PLAT_CONFIG_DEF()

        BOOST_PP_REPEAT(VM_NUM_GUESTS, REPEAT_WRAPPER, VM_CONFIG_DEF)

        cmos.cmos_address_attributes = "0x70:70";
        cmos.cmos_data_attributes = "0x71:71";

        /* Put the time server interrupt at the highest priority */
        time_server.irq_priority = 255;
        /* Also put the rest of the time server high to avoid
         * priority inversion when invoking it */
        time_server.the_timer_priority = 255;
        /* Put the serial interrupt at the next priority
         * but Leave the rest of the serial at default priority */
        serial.serial_irq_priority = 254;
        /* Now the VMM, guest and everything else should be at
         * the default priority of 253 */
        /* The serial will be put at a priority below the guest
         * in the PLAT_CONFIG_DEF */
    }
}
